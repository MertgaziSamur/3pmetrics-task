// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _3pMetricsTask.Repositories.EfCore;

#nullable disable

namespace _3pMetricsTask.Repositories.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240323154907_errors_fixed")]
    partial class errors_fixed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("_3pMetricsTask.Entities.Entities.Catalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CatalogIdHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CatalogName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Catalogs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CatalogIdHash = "5c46ab9ac03397da3f2aa22445b460bf54d968a1cf8084e3e252ff2d209e8bf4",
                            CatalogName = "3P EFDB",
                            CreationDate = new DateTime(2024, 3, 23, 18, 49, 7, 439, DateTimeKind.Local).AddTicks(5497),
                            CreatorId = 1
                        },
                        new
                        {
                            Id = 2,
                            CatalogIdHash = "38d5680b88846d2f2640fb561bfb07318039b80b480e298117334522e4c1a454",
                            CatalogName = "Defra",
                            CreationDate = new DateTime(2024, 3, 23, 18, 49, 7, 439, DateTimeKind.Local).AddTicks(5499),
                            CreatorId = 1
                        });
                });

            modelBuilder.Entity("_3pMetricsTask.Entities.Entities.EmissionFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CatalogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmissionFactorTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EmissionFactorValue")
                        .HasColumnType("float");

                    b.Property<string>("EmissionIdHash")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.ToTable("EmissionFactors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CatalogId = 1,
                            CreationDate = new DateTime(2024, 3, 23, 18, 49, 7, 439, DateTimeKind.Local).AddTicks(5837),
                            CreatorId = 1,
                            EffectiveEndDate = new DateTime(2024, 3, 26, 18, 49, 7, 439, DateTimeKind.Local).AddTicks(5834),
                            EffectiveStartDate = new DateTime(2024, 3, 23, 18, 49, 7, 439, DateTimeKind.Local).AddTicks(5834),
                            EmissionFactorTitle = "Doğalgaz NRM",
                            EmissionFactorValue = 2.00054,
                            EmissionIdHash = "2f6e474a6b719109f4a92d67caa6d9d5b0e3b0fbdcdf70d0f621a693bf6dafff"
                        },
                        new
                        {
                            Id = 2,
                            CatalogId = 1,
                            CreationDate = new DateTime(2024, 3, 23, 18, 49, 7, 439, DateTimeKind.Local).AddTicks(5840),
                            CreatorId = 1,
                            EffectiveEndDate = new DateTime(2024, 3, 28, 18, 49, 7, 439, DateTimeKind.Local).AddTicks(5839),
                            EffectiveStartDate = new DateTime(2024, 3, 23, 18, 49, 7, 439, DateTimeKind.Local).AddTicks(5839),
                            EmissionFactorTitle = "Diesel Ton",
                            EmissionFactorValue = 1.8E-05,
                            EmissionIdHash = "90835cced12fe2db8e2b28217c36224ce6426317b3795db708c0ee7e2a886d32"
                        },
                        new
                        {
                            Id = 3,
                            CatalogId = 1,
                            CreationDate = new DateTime(2024, 3, 23, 18, 49, 7, 439, DateTimeKind.Local).AddTicks(5842),
                            CreatorId = 1,
                            EffectiveEndDate = new DateTime(2024, 3, 31, 18, 49, 7, 439, DateTimeKind.Local).AddTicks(5842),
                            EffectiveStartDate = new DateTime(2024, 3, 23, 18, 49, 7, 439, DateTimeKind.Local).AddTicks(5841),
                            EmissionFactorTitle = "Doğalgaz Tren",
                            EmissionFactorValue = 2.8E-05,
                            EmissionIdHash = "90835cced12fe2db8e2b28217c36224ce6426317b3795db708c0ee7e2a886d32"
                        });
                });

            modelBuilder.Entity("_3pMetricsTask.Entities.Entities.EmissionMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EmissionFactorId")
                        .HasColumnType("int");

                    b.Property<int>("EmissionPointId")
                        .HasColumnType("int");

                    b.Property<int>("EmissionSourceId")
                        .HasColumnType("int");

                    b.Property<int>("SourcesUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EmissionMappings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmissionFactorId = 1,
                            EmissionPointId = 1,
                            EmissionSourceId = 1,
                            SourcesUnitId = 4
                        },
                        new
                        {
                            Id = 2,
                            EmissionFactorId = 1,
                            EmissionPointId = 3,
                            EmissionSourceId = 1,
                            SourcesUnitId = 1
                        },
                        new
                        {
                            Id = 3,
                            EmissionFactorId = 2,
                            EmissionPointId = 2,
                            EmissionSourceId = 2,
                            SourcesUnitId = 2
                        },
                        new
                        {
                            Id = 4,
                            EmissionFactorId = 3,
                            EmissionPointId = 4,
                            EmissionSourceId = 2,
                            SourcesUnitId = 3
                        });
                });

            modelBuilder.Entity("_3pMetricsTask.Entities.Entities.EmissionPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int>("EmissionSourcesUnitId")
                        .HasColumnType("int");

                    b.Property<string>("PointDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PointIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PointIdHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PointName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmissionSourcesUnitId");

                    b.ToTable("EmissionPoints");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2024, 3, 24, 18, 49, 7, 439, DateTimeKind.Local).AddTicks(6247),
                            CreatorId = 1,
                            EmissionSourcesUnitId = 1,
                            PointDescription = "Kombilerde tüketilen enerji",
                            PointIcon = "kombi.png",
                            PointIdHash = "c22cf6c32975aa7e8fd5b9c77de2e9083233743023abaa6f42a6ce65e712a29c",
                            PointName = "Kombi"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2024, 3, 26, 18, 49, 7, 439, DateTimeKind.Local).AddTicks(6250),
                            CreatorId = 1,
                            EmissionSourcesUnitId = 2,
                            PointDescription = "Binek araçlarda tüketilen yakıtlar",
                            PointIcon = "car.png",
                            PointIdHash = "57a58df97aa1b8a380429c3402ceb34ccab2d7275380feb63f65a3af4c94e78e",
                            PointName = "Binek Araç"
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2024, 3, 25, 18, 49, 7, 439, DateTimeKind.Local).AddTicks(6251),
                            CreatorId = 1,
                            EmissionSourcesUnitId = 1,
                            PointDescription = "Fabrikalarda kullanılan enerji",
                            PointIcon = "industry.png",
                            PointIdHash = "25fafd96f2830e1b3a3c88a8f4234e120ee9b41b3b5824f175586a50894458fa",
                            PointName = "Fabrika"
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2024, 3, 25, 18, 49, 7, 439, DateTimeKind.Local).AddTicks(6253),
                            CreatorId = 1,
                            EmissionSourcesUnitId = 2,
                            PointDescription = "Kamyonlarda tüketilen yakıt",
                            PointIcon = "truck.png",
                            PointIdHash = "f3acbbdf3f3df94df27bc57f350016b7dd52ebd6dcd6b218caf9645302cbaeb0",
                            PointName = "Kamyon"
                        });
                });

            modelBuilder.Entity("_3pMetricsTask.Entities.Entities.EmissionSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("SourceIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceIdHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmissionSources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2024, 3, 23, 18, 49, 7, 439, DateTimeKind.Local).AddTicks(6519),
                            CreatorId = 1,
                            SourceIcon = "naturalgas.png",
                            SourceIdHash = "81fe3ee86f53385ce50467730e7193b9ceac0d234e97356e754d5a25cc27d976",
                            SourceName = "Doğalgaz"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2024, 3, 23, 18, 49, 7, 439, DateTimeKind.Local).AddTicks(6521),
                            CreatorId = 1,
                            SourceIcon = "diesel.png",
                            SourceIdHash = "6810ed4e69870ffdffab5c39f555eaa33bf1a02f4da074a220ed1d32c123599e",
                            SourceName = "Dizel"
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2024, 3, 23, 18, 49, 7, 439, DateTimeKind.Local).AddTicks(6522),
                            CreatorId = 1,
                            SourceIcon = "petrol.png",
                            SourceIdHash = "1fe5079c6104aa8e1b6f415a1c60c4239d44236f24604d413f9adc7d596f7c6d",
                            SourceName = "Benzin"
                        });
                });

            modelBuilder.Entity("_3pMetricsTask.Entities.Entities.EmissionSourcesUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("UnitIdHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitSymbol")
                        .HasColumnType("int");

                    b.Property<string>("UnitTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmissionSourcesUnits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2024, 3, 25, 18, 49, 7, 439, DateTimeKind.Local).AddTicks(6725),
                            CreatorId = 1,
                            UnitIdHash = "e6a874d555fefd3686b70114687a7f03ae4dc2c46d56509f59a223ef6c225f9a",
                            UnitSymbol = 0,
                            UnitTitle = "Litre"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2024, 3, 23, 18, 49, 7, 439, DateTimeKind.Local).AddTicks(6727),
                            CreatorId = 1,
                            UnitIdHash = "adba1db0a09fda86bf0ac887088a33f4042bd29c80132e7443c33e3098cf02de",
                            UnitSymbol = 1,
                            UnitTitle = "Ton"
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2024, 3, 26, 18, 49, 7, 439, DateTimeKind.Local).AddTicks(6728),
                            CreatorId = 1,
                            UnitIdHash = "da8ea261cc933a43d3650d9cbfdf9af41c4c6fabf08e480ae0f7371fb70051b8",
                            UnitSymbol = 0,
                            UnitTitle = "Litre"
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2024, 3, 24, 18, 49, 7, 439, DateTimeKind.Local).AddTicks(6729),
                            CreatorId = 1,
                            UnitIdHash = "58e822cfb67cb3edfd7ac6674867e6a0cf1210e6834051d34eddbfdac16271f4",
                            UnitSymbol = 2,
                            UnitTitle = "m3"
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2024, 3, 24, 18, 49, 7, 439, DateTimeKind.Local).AddTicks(6730),
                            CreatorId = 1,
                            UnitIdHash = "d672643d8cae9ff7933f7fffac4b22048162022a04adaf1b6ae120eae2dac6ae",
                            UnitSymbol = 3,
                            UnitTitle = "kwh"
                        });
                });

            modelBuilder.Entity("_3pMetricsTask.Entities.Entities.EmissionFactor", b =>
                {
                    b.HasOne("_3pMetricsTask.Entities.Entities.Catalog", "Catalog")
                        .WithMany("EmissionFactors")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalog");
                });

            modelBuilder.Entity("_3pMetricsTask.Entities.Entities.EmissionPoint", b =>
                {
                    b.HasOne("_3pMetricsTask.Entities.Entities.EmissionSourcesUnit", "EmissionSourcesUnit")
                        .WithMany("EmissionPoints")
                        .HasForeignKey("EmissionSourcesUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmissionSourcesUnit");
                });

            modelBuilder.Entity("_3pMetricsTask.Entities.Entities.Catalog", b =>
                {
                    b.Navigation("EmissionFactors");
                });

            modelBuilder.Entity("_3pMetricsTask.Entities.Entities.EmissionSourcesUnit", b =>
                {
                    b.Navigation("EmissionPoints");
                });
#pragma warning restore 612, 618
        }
    }
}
